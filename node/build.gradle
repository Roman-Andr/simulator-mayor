plugins {
    id("com.github.johnrengelman.shadow")
}

dependencies {
    implementation(project(":common"))

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.6.4")
    implementation('org.jetbrains.kotlin:kotlin-reflect:1.7.20')

    compileOnly("ru.cristalix.core:bukkit-api:1.0.16-SNAPSHOT")
    compileOnly("cristalix:dark-paper:21.02.03")

    implementation("dev.implario.bukkit:dark-paper:1.0.0")
    implementation("dev.implario.bukkit:kotlin-api:1.1.1")
    implementation("dev.implario.bukkit:bukkit-tools:4.4.12")

    implementation("implario:humanize:1.1.3")
    implementation("implario:bukkit-worker-core:2.1.20")

    implementation("ru.cristalix:boards-bukkit-api:3.0.15")

    implementation("me.func:animation-api:3.10.5")
    implementation("me.func:world-api:1.0.9")
    implementation("me.func:metaworld-api:1.0.4")
    implementation("me.func:sound-api:1.0.5")
    implementation("me.func:atlas-api:1.0.10")
}

tasks {
    build { dependsOn(shadowJar) }
}

remotes {
    webServer {
        host = System.getenv("CRI_HOST")
        user = System.getenv("CRI_HOST_USERNAME")
        knownHosts = allowAnyHosts
        identity = file(System.getenv("CRI_HOST_SSHKEY_PATH") ?: "key")
        passphrase = System.getenv("CRI_HOST_PASSPHRASE")
    }
}

task upload(
//        dependsOn: project(":mod").tasks.upload
) {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: project(':node').tasks.jar.getArchiveFile().get().asFile.path, into: "/home/" + System.getenv("CRI_HOST_USERNAME") + "/construction/plugins/"
                execute 'pkill -u ' + System.getenv("CRI_HOST_USERNAME") + ' java;cd construction;./start.sh'
            }
        }
    }
}

afterEvaluate {
    jar {
        archiveBaseName.set("construction")
        from configurations.runtimeClasspath.collect { it.directory ? it : zipTree(it) }
        duplicatesStrategy DuplicatesStrategy.EXCLUDE
    }
    build.finalizedBy(upload)
}
