plugins {
    id("org.jetbrains.kotlin.jvm")
    id("org.hidetake.ssh")
    id("org.jlleitschuh.gradle.ktlint")
}

allprojects {
    group = "me.slavita.construction"
    version = "1.0"
}

subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "org.jetbrains.kotlin.jvm"
//    apply plugin: "org.jlleitschuh.gradle.ktlint"
}

remotes {
    webServer {
        host = System.getenv("CRI_HOST")
        user = System.getenv("CRI_HOST_USERNAME")
        knownHosts = allowAnyHosts
        identity = file(System.getenv("CRI_HOST_SSHKEY_PATH") ?: "key")
        passphrase = System.getenv("CRI_HOST_PASSPHRASE")
    }
    webStorage {
        host = System.getenv("CRI_STORAGE_HOST")
        user = System.getenv("CRI_HOST_USERNAME")
        knownHosts = allowAnyHosts
        identity = file(System.getenv("CRI_HOST_SSHKEY_PATH") ?: "key")
        passphrase = System.getenv("CRI_HOST_PASSPHRASE")
    }
}

tasks.register("uploadConfig") {
    dependsOn(project(":node").tasks.shadowJar)
    doLast {
        ssh.run {
            session(remotes.webStorage) {
                remove "/home/" +
                        System.getenv("CRI_HOST_USERNAME") +
                        "/storage/construction"
                put from: rootDir.path + "/storage/construction", into: "/home/" + System.getenv("CRI_HOST_USERNAME") + "/storage"
            }
        }
    }
}

tasks.register("uploadNodeOnly") {
    dependsOn(project(":node").tasks.shadowJar)
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: project(":node").tasks.jar.getArchiveFile().get().asFile.path, into: "/home/" + System.getenv("CRI_HOST_USERNAME") + "/construction/server/plugins/"
                execute('ps -eo pid | while read line; do pwdx \$line 2> /dev/null; done | grep "' +
                        'home/' +
                        System.getenv("CRI_HOST_USERNAME") +
                        '/construction/server"' +
                        ' | cut -d\':\' -f1 | while read line; do kill \$line; done;')
                execute("cd construction/server;./start.sh")
            }
        }
    }
}

tasks.register("uploadNode") {
    dependsOn(tasks.uploadMod)
    dependsOn(tasks.config)
    dependsOn(tasks.uploadNodeOnly)
}

tasks.register("uploadMod") {
    dependsOn(project(":mod").tasks.build)
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: project(":mod").layout.buildDirectory.file("libs/construction-mod.jar").get().asFile, into: "/home/" + System.getenv("CRI_HOST_USERNAME") + "/construction/server/mods/"
            }
        }
    }
}

tasks.register("uploadService") {
    dependsOn(project(":service").tasks.shadowJar)
    doLast {
        ssh.run {
            session(remotes.webServer) {
                put from: project(":service").tasks.shadowJar.getArchiveFile().get().asFile.path, into: "/home/" + System.getenv("CRI_HOST_USERNAME") + "/construction/service/"
                execute('ps -eo pid | while read line; do pwdx \$line 2> /dev/null; done | grep "' +
                        'home/' + System.getenv("CRI_HOST_USERNAME") + '/construction/service"' +
                        ' | cut -d\':\' -f1 | while read line; do kill \$line; done;')
                execute("cd construction/service;./start.sh")
            }
        }
    }
}